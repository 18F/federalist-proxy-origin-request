AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  federalist-proxy

  SAM Template for federalist-proxy
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5 # timeouts for viewer can be < 5 and for origin < 30

Parameters:
  StackEnv:
    Type: String
    Default: staging
    AllowedValues:
      - staging
      - prod
    Description: stack environemnt

Resources:
  BasicAuthFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "federalist-proxy-${StackEnv}-viewer-request"
      CodeUri: lambdas/
      Handler: app.viewerRequest
      Runtime: nodejs12.x
      AutoPublishAlias: live
      Policies: AmazonDynamoDBReadOnlyAccess

  CustomOriginRoutingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "federalist-proxy-${StackEnv}-origin-request"
      CodeUri: lambdas/
      Handler: app.originRequest
      Runtime: nodejs12.x
      AutoPublishAlias: live
      Policies: AmazonDynamoDBReadOnlyAccess

  CustomHeadersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub "federalist-proxy-${StackEnv}-origin-response"
      CodeUri: lambdas/
      Handler: app.originResponse
      Runtime: nodejs12.x
      AutoPublishAlias: live

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'

  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: 'true'
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
          LambdaFunctionAssociations:
            - 
              EventType: origin-request
              LambdaFunctionARN: !Ref CustomOriginRoutingFunction.Version
            - 
              EventType: origin-response
              LambdaFunctionARN: !Ref CustomHeadersFunction.Version
            - 
              EventType: viewer-request
              LambdaFunctionARN: !Ref BasicAuthFunction.Version
          ForwardedValues:
            QueryString: true
            Headers:
              - "X-Frame-Options"
              - host
              - "x-forwarded-host"
              - Authorization
            Cookies:
              Forward: none
        Aliases:
          - !Sub "*.sites-${StackEnv}.federalist.18f.gov"
        ViewerCertificate:
          AcmCertificateArn: !Ref DomainCertificate
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: 'sni-only'
        Logging:
          Bucket: !GetAtt S3Bucket.DomainName
          Prefix: 'cloudfront-logs/'
  S3Bucket:
    Type: AWS::S3::Bucket

  DynamoSiteTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "federalist-proxy-${StackEnv}"
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  DomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties: 
      DomainName: !Sub "*.sites-${StackEnv}.federalist.18f.gov"
      ValidationMethod: DNS
